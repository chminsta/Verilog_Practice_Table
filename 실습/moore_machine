//design

module moore_fsm (
    input clk,     // clk 
    input rst,     // 리셋
    input bypass,  // bypass 1이되면 ST1에서 ST3
    
    output reg [1:0] out  // output 
);

// ST state를 나타내는 파라미터 정의
parameter ST0 = 2'b00, ST1 = 2'b01, ST2 = 2'b10, ST3 = 2'b11,  ;

// curr_state 정의, 초기는 ST0
reg [1:0] curr_state = ST0;

// 다음 state 정하기
always @(posedge clk ,negedge rstn) begin
    case (curr_state)
        ST0: if (rst) curr_state = ST0; else curr_state = ST1;
        ST1: if (bypass) curr_state = ST3; else curr_state = ST2;
        ST2: curr_state = ST3;
        ST3: curr_state = ST0;
    endcase
end

// out 정의
always @(curr_state) begin
    case (curr_state)
        ST0: out = 2'b00;
        ST1: out = 2'b01;
        ST2: out = 2'b10;
        ST3: out = 2'b11;
    endcase
end

endmodule



//testbench

module moore_fsm_tb;

// Define the clock and reset signals
reg clk = 0;
reg rst = 1;

// Define the bypass signal for ST1 to ST3 transition
reg bypass;

// Instantiate the DUT (Design Under Test)
moore_fsm dut (
    .clk(clk),
    .rst(rst),
    .bypass(bypass),
    .out(out)
);

// Define the output signal for the DUT
wire [1:0] out;



// Generate a clock signal
always #5 clk = ~clk;

// Reset the DUT for the first few clock cycles
initial begin
    #10 rst = 0;
    #20 rst = 1;
end

// Stimulus generator for the FSM
initial begin
    // Wait for the reset to complete
    #10;
    
    // Transition from ST0 to ST1
    #10 bypass = 0;
    #10 bypass = 1;
    
    // Transition from ST1 to ST2
    #10 bypass = 0;
    
    // Transition from ST2 to ST3
    #10 bypass = 1;
    
    // Transition from ST3 to ST0
    #10 bypass = 0;
    
    // Repeat the sequence a few more times
    #10 bypass = 1;
    #10 bypass = 0;
    #10 bypass = 1;
    #10 bypass = 0;
    #10 bypass = 1;
    #10 bypass = 0;
end

// Monitor the output signal
always @(out) $display("Output: %d", out);

// Stop the simulation after the specified time
initial begin
    #100 $finish;
end

endmodule
